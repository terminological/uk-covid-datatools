% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/UKGeographyProvider.R
\name{UKGeographyProvider}
\alias{UKGeographyProvider}
\title{UK Geography}
\description{
UK Geography

UK Geography
}
\section{Super classes}{
\code{\link[ukcovidtools:PassthroughFilesystemCache]{ukcovidtools::PassthroughFilesystemCache}} -> \code{\link[ukcovidtools:DataProvider]{ukcovidtools::DataProvider}} -> \code{UKGeographyProvider}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{UKGeographyProvider$new()}}
\item \href{#method-getMapList}{\code{UKGeographyProvider$getMapList()}}
\item \href{#method-getMap}{\code{UKGeographyProvider$getMap()}}
\item \href{#method-getPHEDashboardMap}{\code{UKGeographyProvider$getPHEDashboardMap()}}
\item \href{#method-getIntersection}{\code{UKGeographyProvider$getIntersection()}}
\item \href{#method-getContainedIn}{\code{UKGeographyProvider$getContainedIn()}}
\item \href{#method-interpolateByArea}{\code{UKGeographyProvider$interpolateByArea()}}
\item \href{#method-createNeighbourNetwork}{\code{UKGeographyProvider$createNeighbourNetwork()}}
\item \href{#method-standardiseMap}{\code{UKGeographyProvider$standardiseMap()}}
\item \href{#method-saveShapefile}{\code{UKGeographyProvider$saveShapefile()}}
\item \href{#method-loadAllMaps}{\code{UKGeographyProvider$loadAllMaps()}}
\item \href{#method-createCatchment}{\code{UKGeographyProvider$createCatchment()}}
\item \href{#method-preview}{\code{UKGeographyProvider$preview()}}
\item \href{#method-plot}{\code{UKGeographyProvider$plot()}}
\item \href{#method-clone}{\code{UKGeographyProvider$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getDaily">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getDaily}{\code{ukcovidtools::PassthroughFilesystemCache$getDaily()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getHashCached">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getHashCached}{\code{ukcovidtools::PassthroughFilesystemCache$getHashCached()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getSaved">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getSaved}{\code{ukcovidtools::PassthroughFilesystemCache$getSaved()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="unloadCache">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-unloadCache}{\code{ukcovidtools::PassthroughFilesystemCache$unloadCache()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="ageCatToFactor">}\href{../../ukcovidtools/html/DataProvider.html#method-ageCatToFactor}{\code{ukcovidtools::DataProvider$ageCatToFactor()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="ageToAgeCat">}\href{../../ukcovidtools/html/DataProvider.html#method-ageToAgeCat}{\code{ukcovidtools::DataProvider$ageToAgeCat()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="breakFromCats">}\href{../../ukcovidtools/html/DataProvider.html#method-breakFromCats}{\code{ukcovidtools::DataProvider$breakFromCats()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="cutByAge">}\href{../../ukcovidtools/html/DataProvider.html#method-cutByAge}{\code{ukcovidtools::DataProvider$cutByAge()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="download">}\href{../../ukcovidtools/html/DataProvider.html#method-download}{\code{ukcovidtools::DataProvider$download()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="downloadAndUntar">}\href{../../ukcovidtools/html/DataProvider.html#method-downloadAndUntar}{\code{ukcovidtools::DataProvider$downloadAndUntar()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="downloadAndUnzip">}\href{../../ukcovidtools/html/DataProvider.html#method-downloadAndUnzip}{\code{ukcovidtools::DataProvider$downloadAndUnzip()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="downloadDaily">}\href{../../ukcovidtools/html/DataProvider.html#method-downloadDaily}{\code{ukcovidtools::DataProvider$downloadDaily()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="labelsFromBreaks">}\href{../../ukcovidtools/html/DataProvider.html#method-labelsFromBreaks}{\code{ukcovidtools::DataProvider$labelsFromBreaks()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="normaliseAgeCat">}\href{../../ukcovidtools/html/DataProvider.html#method-normaliseAgeCat}{\code{ukcovidtools::DataProvider$normaliseAgeCat()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="normaliseGender">}\href{../../ukcovidtools/html/DataProvider.html#method-normaliseGender}{\code{ukcovidtools::DataProvider$normaliseGender()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$new(providerController, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMapList"></a>}}
\subsection{Method \code{getMapList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$getMapList()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMap"></a>}}
\subsection{Method \code{getMap()}}{
get a map as an sf object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$getMap(mapId, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{codeType}}{the map you want}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getPHEDashboardMap"></a>}}
\subsection{Method \code{getPHEDashboardMap()}}{

\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$getPHEDashboardMap(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getIntersection"></a>}}
\subsection{Method \code{getIntersection()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$getIntersection(
  inputMapId,
  inputShape = self$getMap(inputMapId),
  outputMapId,
  outputShape = self$getMap(outputMapId),
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getContainedIn"></a>}}
\subsection{Method \code{getContainedIn()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$getContainedIn(
  inputSf,
  outputShape = self$getMap(outputMapId),
  outputMapId = NA,
  inputIdVar = "code",
  outputIdVar = "code"
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-interpolateByArea"></a>}}
\subsection{Method \code{interpolateByArea()}}{
interpolate a variable from one set of shapes to another
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$interpolateByArea(
  inputDf,
  inputMapId,
  inputShape = self$getMap(inputMapId),
  inputIdVar = "code",
  interpolateVar,
  outputMapId,
  outputShape = self$getMap(outputMapId) \%>\% dplyr::group_by(codeType, code, name),
  outputVars = outputShape \%>\% dplyr::groups(),
  aggregateFn = sum
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputDf}}{- a grouped dataframe containing the statistic to be interpolated}

\item{\code{inputShape}}{- an input map,}

\item{\code{inputIdVar}}{- an id shared between the grouped data fram and the input map,}

\item{\code{interpolateVar}}{- the statistic,}

\item{\code{outputShape}}{- an output map which must be grouped by the desired output,}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a dataframe containing the grouping columns, the outputIdVar and the interpolated value of interpolateVar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-createNeighbourNetwork"></a>}}
\subsection{Method \code{createNeighbourNetwork()}}{
create a neighbourhood network from a shapefile
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$createNeighbourNetwork(
  mapId,
  shape = self$getMap(mapId) \%>\% dplyr::group_by(code, name),
  idVar = "code",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mapId}}{- a the ID of the map}

\item{\code{shape}}{- a sf object, if not present will be loaded from cache}

\item{\code{idVar}}{- the varable containing the coded identifier of the map}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
an edge list of ids with from and to columns
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-standardiseMap"></a>}}
\subsection{Method \code{standardiseMap()}}{
standardise all maps to a minimal set of attributes with consistent naming
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$standardiseMap(sf, codeCol, nameCol, altCodeCol, codeType)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-saveShapefile"></a>}}
\subsection{Method \code{saveShapefile()}}{
save a shapefile to disk in the current working directory
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$saveShapefile(
  mapId,
  shape = self$getMap(mapId),
  overwrite = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{mapId}}{- a mapId - will become the zip filename}

\item{\code{-}}{a zip directory}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a dataframe containing the grouping columns, the outputIdVar and the interpolated value of interpolateVar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-loadAllMaps"></a>}}
\subsection{Method \code{loadAllMaps()}}{
warm up caches
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$loadAllMaps()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-createCatchment"></a>}}
\subsection{Method \code{createCatchment()}}{
create a catchment area map from
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$createCatchment(
  supplyShape,
  supplyIdVar = "code",
  supplyVar,
  supplyOutputVars = supplyShape \%>\% dplyr::groups(),
  demandId,
  demandShape,
  demandIdVar = "code",
  demandVar,
  growthRates = function(capacityPerDemand, multiplier = 1.1) {    
    return(rank(capacityPerDemand)/length(capacityPerDemand) * multiplier) },
  distanceModifier = function(distanceToSupply) {     return(2/(1 +
    distanceToSupply/min(0.1, mean(distanceToSupply)))) },
  tweakNetwork = self$sources$tweak$DEMOG,
  outputMap = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{supplyShape}}{- a sf object containing a list of the locations of supply points, with a column containing supply capacity, for example NHS hospital sites, with a bed}

\item{\code{supplyIdVar}}{- the variable name of the identifier of the supplier or group of suppliers. For example this could be an NHS trust (multiple sites)}

\item{\code{supplyVar}}{- the column name of the supply parameter. This could be number of beds in a hospital.}

\item{\code{supplyOutputVars}}{- the columns from the input that are to be retained in the output}

\item{\code{demandShape}}{- the sf object with the geographical map of the demand surface. For example the geographical distribution of the population served,}

\item{\code{demandIdVar}}{- the column name of the unique identifier of the areas,}

\item{\code{demandVar}}{- the column name of the demand parameter. This could be the population in each region}

\item{\code{growthRates}}{- a function to calculate}

\item{\code{distanceModifier}}{- distance modifier}

\item{\code{tweakNetwork}}{- a named list containing extra linkages beyond those inferred by the demandShape topology. These are used to add in bridges}

\item{\code{outputMap}}{- catch}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a dataframe containing the grouping columns, the outputIdVar and the interpolated value of interpolateVar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-preview"></a>}}
\subsection{Method \code{preview()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$preview(
  shape = self$getMap(mapId),
  mapId = NA,
  nameVar = "name",
  codeVar = "code",
  poi = NULL,
  poiNameVar = "name",
  poiCodeVar = "code"
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\subsection{Method \code{plot()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$plot(shape = self$getMap(mapId), mapId = NA)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{UKGeographyProvider$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
