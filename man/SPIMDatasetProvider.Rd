% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/SPIMDatasetProvider.R
\name{SPIMDatasetProvider}
\alias{SPIMDatasetProvider}
\title{SPIM private data}
\description{
SPIM private data

SPIM private data
}
\examples{

## ------------------------------------------------
## Method `SPIMDatasetProvider$interpretSGene`
## ------------------------------------------------

coxData = coxData \%>\% interpretSGene()
#' @description Load incidence from line list
#' 
#' @param ageBreaks - a list of ages which form the cut points for breaking continuous ages into ranges (or NULL for a single age category)
#' @return a covidTimeseriesFormat dataframe
getLineListIncidence = function(ll=NULL, ageBreaks = NULL, gender=FALSE, specimenOrReport="specimen", subgroup="pillar", filterExpr=NULL, codeTypes = c("CTRY","NHSER"), truncate=NULL, ...) {
  filterExpr = enexpr(filterExpr)
  subgroup = tryCatch(ensym(subgroup), error = function(e) NULL)
  if(!identical(ll,NULL)) {
    tmp = ll  \%>\% collect()
  } else {
    tmp = self$getLineList(...) \%>\% collect()
  }
  path = attr(tmp,"paths")
  out2 = self$getSaved("LINE-LIST-INCIDENCE", params=list(tmp, ageBreaks, specimenOrReport,as_label(subgroup), as_label(filterExpr), codeTypes, gender), ..., orElse = function (...) covidTimeseriesFormat({
    if(!identical(filterExpr,NULL)) 
      tmp = tmp \%>\% filter(!!filterExpr)
    tmp = tmp \%>\% dplyr::mutate(ageCat = age \%>\% self$cutByAge(ageBreaks)) 
    if (gender) {
      tmp = tmp \%>\% dplyr::mutate(gender=self$normaliseGender(sex))
    } else {
      tmp = tmp \%>\% dplyr::mutate(gender=NA_character_)
    }
    if(!identical(subgroup,NULL)) {
      tmp = tmp \%>\% dplyr::mutate(subgroup=!!subgroup)
    } else {
      tmp = tmp \%>\% dplyr::mutate(subgroup=NA_character_)
    }
    if(specimenOrReport == "report")
      tmp = tmp \%>\% dplyr::mutate(date = as.Date(lab_report_date))
    else
      tmp = tmp \%>\% dplyr::mutate(date = as.Date(specimen_date))
    
    selectByRegion = function(df, code, codeType, name) {
      code = ensym(code)
      name = ensym(name)
      # check column exists
      if(!(as_label(code) \%in\% colnames(df))) return(tibble())
      df = df \%>\% dplyr::mutate(code = !!code, codeType=codeType, name=!!name) \%>\% 
        dplyr::mutate(
          code = ifelse(is.na(code),"E99999999",code),
          name = ifelse(is.na(code),"Unknown (England)",name)
        ) \%>\%
        dplyr::group_by( code,codeType,name,date, ageCat, gender,subgroup) \%>\% 
        dplyr::summarise(value = n()) 
      return(df)
    }
    
    out = NULL
    if ("CTRY" \%in\% codeTypes) {
      england = tmp \%>\% dplyr::mutate(code = "E92000001", codeType= "CTRY", name="England") \%>\% 
        dplyr::group_by(code,codeType,name,date, ageCat, gender,subgroup) \%>\% 
        dplyr::summarise(value = n())
      out = out \%>\% bind_rows(england)
    }
    
    if ("NHSER" \%in\% codeTypes) {
      nhser = tmp \%>\% selectByRegion(NHSER_code, "NHSER", NHSER_name)
      isNhser = nhser \%>\% self$codes$allPresentAndCorrect(codeTypes=c("NHSER","PSEUDO"))
      
      if(!isNhser) {
        nhser = tmp \%>\% selectByRegion(NHSER_code, "NHSER19CDH", NHSER_name) \%>\% 
          dplyr::inner_join(
            self$codes$getMappings() \%>\% dplyr::filter(fromCodeType=="NHSER19CDH" & toCodeType=="NHSER"), 
            by=c("code"="fromCode")
          ) \%>\%
          dplyr::ungroup() \%>\%
          dplyr::select(-code,-codeType, -fromCodeType,-rel,-weight) \%>\%
          dplyr::rename(code = toCode, codeType=toCodeType)
      }
      out = out \%>\% bind_rows(nhser)
    }
    
    if ("PHEC" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(PHEC_code, "PHEC", PHEC_name))}
    if ("UA" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(UTLA_code, "UA", UTLA_name))}
    if ("LAD" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(LTLA_code, "LAD", LTLA_name))}
    if ("LSOA" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(LSOA_code, "LSOA", LSOA_name))}
    
    out = out \%>\% dplyr::mutate(source="line list",statistic = "case", type="incidence")
    out = out \%>\% self$fixDatesAndNames(truncate)
    out = out \%>\% self$fillAbsent(completeDates=TRUE)
    out = out \%>\% dplyr::ungroup()
    return(out)
  }))
  attr(out2,"paths") = path
  return(out2 \%>\% as_tibble())
},
}
\section{Super classes}{
\code{\link[ukcovidtools:PassthroughFilesystemCache]{ukcovidtools::PassthroughFilesystemCache}} -> \code{\link[ukcovidtools:DataProvider]{ukcovidtools::DataProvider}} -> \code{\link[ukcovidtools:CovidTimeseriesProvider]{ukcovidtools::CovidTimeseriesProvider}} -> \code{SPIMDatasetProvider}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SPIMDatasetProvider$new()}}
\item \href{#method-finalize}{\code{SPIMDatasetProvider$finalize()}}
\item \href{#method-getPaths}{\code{SPIMDatasetProvider$getPaths()}}
\item \href{#method-getLineListLatest}{\code{SPIMDatasetProvider$getLineListLatest()}}
\item \href{#method-getAllLatest}{\code{SPIMDatasetProvider$getAllLatest()}}
\item \href{#method-getLatest}{\code{SPIMDatasetProvider$getLatest()}}
\item \href{#method-getNewerThan}{\code{SPIMDatasetProvider$getNewerThan()}}
\item \href{#method-getSpecificDates}{\code{SPIMDatasetProvider$getSpecificDates()}}
\item \href{#method-getLatestRawFile}{\code{SPIMDatasetProvider$getLatestRawFile()}}
\item \href{#method-getRawFile}{\code{SPIMDatasetProvider$getRawFile()}}
\item \href{#method-getSQLLite}{\code{SPIMDatasetProvider$getSQLLite()}}
\item \href{#method-getTable}{\code{SPIMDatasetProvider$getTable()}}
\item \href{#method-batchLoadTable}{\code{SPIMDatasetProvider$batchLoadTable()}}
\item \href{#method-getDeathsLineList}{\code{SPIMDatasetProvider$getDeathsLineList()}}
\item \href{#method-getVAMLineList}{\code{SPIMDatasetProvider$getVAMLineList()}}
\item \href{#method-getCTASLineList}{\code{SPIMDatasetProvider$getCTASLineList()}}
\item \href{#method-getVaccinationLineList}{\code{SPIMDatasetProvider$getVaccinationLineList()}}
\item \href{#method-getSGeneLineList}{\code{SPIMDatasetProvider$getSGeneLineList()}}
\item \href{#method-getLineList}{\code{SPIMDatasetProvider$getLineList()}}
\item \href{#method-getAdmissionLineList}{\code{SPIMDatasetProvider$getAdmissionLineList()}}
\item \href{#method-getLinkedVaccinations}{\code{SPIMDatasetProvider$getLinkedVaccinations()}}
\item \href{#method-getLinkedCtas}{\code{SPIMDatasetProvider$getLinkedCtas()}}
\item \href{#method-getLinkedDeaths}{\code{SPIMDatasetProvider$getLinkedDeaths()}}
\item \href{#method-getLinkedGenomics}{\code{SPIMDatasetProvider$getLinkedGenomics()}}
\item \href{#method-getCombinedGenomics}{\code{SPIMDatasetProvider$getCombinedGenomics()}}
\item \href{#method-getMasterPersonIndex}{\code{SPIMDatasetProvider$getMasterPersonIndex()}}
\item \href{#method-getAdmissionEpisodes}{\code{SPIMDatasetProvider$getAdmissionEpisodes()}}
\item \href{#method-getAdmissionEpisodesLink}{\code{SPIMDatasetProvider$getAdmissionEpisodesLink()}}
\item \href{#method-getIncidenceFromLineList}{\code{SPIMDatasetProvider$getIncidenceFromLineList()}}
\item \href{#method-getDeathsLineListIncidence}{\code{SPIMDatasetProvider$getDeathsLineListIncidence()}}
\item \href{#method-getLineListIncidence}{\code{SPIMDatasetProvider$getLineListIncidence()}}
\item \href{#method-getOutcomeEvents}{\code{SPIMDatasetProvider$getOutcomeEvents()}}
\item \href{#method-getDiagnosisEvents}{\code{SPIMDatasetProvider$getDiagnosisEvents()}}
\item \href{#method-getVaccinationEvents}{\code{SPIMDatasetProvider$getVaccinationEvents()}}
\item \href{#method-getEventTimeline}{\code{SPIMDatasetProvider$getEventTimeline()}}
\item \href{#method-getAugmentedEventTimeline}{\code{SPIMDatasetProvider$getAugmentedEventTimeline()}}
\item \href{#method-getOneOneOne}{\code{SPIMDatasetProvider$getOneOneOne()}}
\item \href{#method-getOneOneOneLineList}{\code{SPIMDatasetProvider$getOneOneOneLineList()}}
\item \href{#method-getOneOneOneIncidence}{\code{SPIMDatasetProvider$getOneOneOneIncidence()}}
\item \href{#method-getVoc351LineList}{\code{SPIMDatasetProvider$getVoc351LineList()}}
\item \href{#method-getImmunizationLineListIncidence}{\code{SPIMDatasetProvider$getImmunizationLineListIncidence()}}
\item \href{#method-getImmunizationFraction}{\code{SPIMDatasetProvider$getImmunizationFraction()}}
\item \href{#method-interpretSGene}{\code{SPIMDatasetProvider$interpretSGene()}}
\item \href{#method-getSGeneEras}{\code{SPIMDatasetProvider$getSGeneEras()}}
\item \href{#method-getSDropoutFreqency}{\code{SPIMDatasetProvider$getSDropoutFreqency()}}
\item \href{#method-augmentLineListWithLSOA}{\code{SPIMDatasetProvider$augmentLineListWithLSOA()}}
\item \href{#method-getInfectionEpisodes}{\code{SPIMDatasetProvider$getInfectionEpisodes()}}
\item \href{#method-getNegatives}{\code{SPIMDatasetProvider$getNegatives()}}
\item \href{#method-getSeroprevalence}{\code{SPIMDatasetProvider$getSeroprevalence()}}
\item \href{#method-getSeroprevalenceTestIncidence}{\code{SPIMDatasetProvider$getSeroprevalenceTestIncidence()}}
\item \href{#method-getFF100}{\code{SPIMDatasetProvider$getFF100()}}
\item \href{#method-getCHESS}{\code{SPIMDatasetProvider$getCHESS()}}
\item \href{#method-getSARI}{\code{SPIMDatasetProvider$getSARI()}}
\item \href{#method-getCHESSSummary}{\code{SPIMDatasetProvider$getCHESSSummary()}}
\item \href{#method-getSARISummary}{\code{SPIMDatasetProvider$getSARISummary()}}
\item \href{#method-getFourNationsCases}{\code{SPIMDatasetProvider$getFourNationsCases()}}
\item \href{#method-getSPIMextract}{\code{SPIMDatasetProvider$getSPIMextract()}}
\item \href{#method-getTheSPIMFireHose}{\code{SPIMDatasetProvider$getTheSPIMFireHose()}}
\item \href{#method-clone}{\code{SPIMDatasetProvider$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getDaily">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getDaily}{\code{ukcovidtools::PassthroughFilesystemCache$getDaily()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getHashCached">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getHashCached}{\code{ukcovidtools::PassthroughFilesystemCache$getHashCached()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="getSaved">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-getSaved}{\code{ukcovidtools::PassthroughFilesystemCache$getSaved()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="PassthroughFilesystemCache" data-id="unloadCache">}\href{../../ukcovidtools/html/PassthroughFilesystemCache.html#method-unloadCache}{\code{ukcovidtools::PassthroughFilesystemCache$unloadCache()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="ageCatToFactor">}\href{../../ukcovidtools/html/DataProvider.html#method-ageCatToFactor}{\code{ukcovidtools::DataProvider$ageCatToFactor()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="ageToAgeCat">}\href{../../ukcovidtools/html/DataProvider.html#method-ageToAgeCat}{\code{ukcovidtools::DataProvider$ageToAgeCat()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="breakFromCats">}\href{../../ukcovidtools/html/DataProvider.html#method-breakFromCats}{\code{ukcovidtools::DataProvider$breakFromCats()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="cutByAge">}\href{../../ukcovidtools/html/DataProvider.html#method-cutByAge}{\code{ukcovidtools::DataProvider$cutByAge()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="download">}\href{../../ukcovidtools/html/DataProvider.html#method-download}{\code{ukcovidtools::DataProvider$download()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="downloadAndUntar">}\href{../../ukcovidtools/html/DataProvider.html#method-downloadAndUntar}{\code{ukcovidtools::DataProvider$downloadAndUntar()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="downloadAndUnzip">}\href{../../ukcovidtools/html/DataProvider.html#method-downloadAndUnzip}{\code{ukcovidtools::DataProvider$downloadAndUnzip()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="downloadDaily">}\href{../../ukcovidtools/html/DataProvider.html#method-downloadDaily}{\code{ukcovidtools::DataProvider$downloadDaily()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="labelsFromBreaks">}\href{../../ukcovidtools/html/DataProvider.html#method-labelsFromBreaks}{\code{ukcovidtools::DataProvider$labelsFromBreaks()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="normaliseAgeCat">}\href{../../ukcovidtools/html/DataProvider.html#method-normaliseAgeCat}{\code{ukcovidtools::DataProvider$normaliseAgeCat()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="normaliseDemographics">}\href{../../ukcovidtools/html/DataProvider.html#method-normaliseDemographics}{\code{ukcovidtools::DataProvider$normaliseDemographics()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="DataProvider" data-id="normaliseGender">}\href{../../ukcovidtools/html/DataProvider.html#method-normaliseGender}{\code{ukcovidtools::DataProvider$normaliseGender()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="complete">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-complete}{\code{ukcovidtools::CovidTimeseriesProvider$complete()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="completeAllRegions">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-completeAllRegions}{\code{ukcovidtools::CovidTimeseriesProvider$completeAllRegions()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="describe">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-describe}{\code{ukcovidtools::CovidTimeseriesProvider$describe()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="describeErrors">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-describeErrors}{\code{ukcovidtools::CovidTimeseriesProvider$describeErrors()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="fillAbsent">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-fillAbsent}{\code{ukcovidtools::CovidTimeseriesProvider$fillAbsent()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="fillAbsentAllRegions">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-fillAbsentAllRegions}{\code{ukcovidtools::CovidTimeseriesProvider$fillAbsentAllRegions()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="fillAbsentByRegion">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-fillAbsentByRegion}{\code{ukcovidtools::CovidTimeseriesProvider$fillAbsentByRegion()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="fixDates">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-fixDates}{\code{ukcovidtools::CovidTimeseriesProvider$fixDates()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="fixDatesAndNames">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-fixDatesAndNames}{\code{ukcovidtools::CovidTimeseriesProvider$fixDatesAndNames()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="setTruncation">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-setTruncation}{\code{ukcovidtools::CovidTimeseriesProvider$setTruncation()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="timeseriesQA">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-timeseriesQA}{\code{ukcovidtools::CovidTimeseriesProvider$timeseriesQA()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="ukcovidtools" data-topic="CovidTimeseriesProvider" data-id="trimNAs">}\href{../../ukcovidtools/html/CovidTimeseriesProvider.html#method-trimNAs}{\code{ukcovidtools::CovidTimeseriesProvider$trimNAs()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$new(providerController, fileProvider, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$finalize()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getPaths"></a>}}
\if{latex}{\out{\hypertarget{method-getPaths}{}}}
\subsection{Method \code{getPaths()}}{
Search a file path for the
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getPaths(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{- path to the line list file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
raw line list data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLineListLatest"></a>}}
\if{latex}{\out{\hypertarget{method-getLineListLatest}{}}}
\subsection{Method \code{getLineListLatest()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLineListLatest()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAllLatest"></a>}}
\if{latex}{\out{\hypertarget{method-getAllLatest}{}}}
\subsection{Method \code{getAllLatest()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getAllLatest(filters = names(self$filter))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLatest"></a>}}
\if{latex}{\out{\hypertarget{method-getLatest}{}}}
\subsection{Method \code{getLatest()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLatest(search)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getNewerThan"></a>}}
\if{latex}{\out{\hypertarget{method-getNewerThan}{}}}
\subsection{Method \code{getNewerThan()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getNewerThan(search, date = as.Date("2020-01-01"))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSpecificDates"></a>}}
\if{latex}{\out{\hypertarget{method-getSpecificDates}{}}}
\subsection{Method \code{getSpecificDates()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSpecificDates(search, dates)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLatestRawFile"></a>}}
\if{latex}{\out{\hypertarget{method-getLatestRawFile}{}}}
\subsection{Method \code{getLatestRawFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLatestRawFile(filter, to = getwd())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getRawFile"></a>}}
\if{latex}{\out{\hypertarget{method-getRawFile}{}}}
\subsection{Method \code{getRawFile()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getRawFile(path, to = getwd())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSQLLite"></a>}}
\if{latex}{\out{\hypertarget{method-getSQLLite}{}}}
\subsection{Method \code{getSQLLite()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSQLLite(reset = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTable"></a>}}
\if{latex}{\out{\hypertarget{method-getTable}{}}}
\subsection{Method \code{getTable()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getTable(
  table,
  params = NULL,
  ...,
  orElse,
  nocache = NULL,
  debug = NULL,
  con = self$getSQLLite(),
  indexes = list(),
  uniqueIndexes = list()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-batchLoadTable"></a>}}
\if{latex}{\out{\hypertarget{method-batchLoadTable}{}}}
\subsection{Method \code{batchLoadTable()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$batchLoadTable(
  table,
  csvPath,
  wrangleBatch,
  indexes = "FINALID",
  uniqueIndexes = "record_id",
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDeathsLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getDeathsLineList}{}}}
\subsection{Method \code{getDeathsLineList()}}{
Load line list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getDeathsLineList(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{- path to the line list file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
raw line list data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getVAMLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getVAMLineList}{}}}
\subsection{Method \code{getVAMLineList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getVAMLineList(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getCTASLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getCTASLineList}{}}}
\subsection{Method \code{getCTASLineList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getCTASLineList(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getVaccinationLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getVaccinationLineList}{}}}
\subsection{Method \code{getVaccinationLineList()}}{
Load immunizations line list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getVaccinationLineList(...)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw line list data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSGeneLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getSGeneLineList}{}}}
\subsection{Method \code{getSGeneLineList()}}{
Load line list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSGeneLineList(...)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw line list data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getLineList}{}}}
\subsection{Method \code{getLineList()}}{
Load line list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLineList(...)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw line list data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAdmissionLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getAdmissionLineList}{}}}
\subsection{Method \code{getAdmissionLineList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getAdmissionLineList(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLinkedVaccinations"></a>}}
\if{latex}{\out{\hypertarget{method-getLinkedVaccinations}{}}}
\subsection{Method \code{getLinkedVaccinations()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLinkedVaccinations(
  ...,
  immunisations = self$getVaccinationLineList()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLinkedCtas"></a>}}
\if{latex}{\out{\hypertarget{method-getLinkedCtas}{}}}
\subsection{Method \code{getLinkedCtas()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLinkedCtas(..., ctas = self$getCTASLineList())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLinkedDeaths"></a>}}
\if{latex}{\out{\hypertarget{method-getLinkedDeaths}{}}}
\subsection{Method \code{getLinkedDeaths()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLinkedDeaths(..., deaths = self$getDeathsLineList())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLinkedGenomics"></a>}}
\if{latex}{\out{\hypertarget{method-getLinkedGenomics}{}}}
\subsection{Method \code{getLinkedGenomics()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLinkedGenomics(..., genomics = self$getVAMLineList())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getCombinedGenomics"></a>}}
\if{latex}{\out{\hypertarget{method-getCombinedGenomics}{}}}
\subsection{Method \code{getCombinedGenomics()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getCombinedGenomics(
  ...,
  variant_designation = ukcovidtools::variantDesignation,
  linked_genomics = self$getLinkedGenomics(),
  linked_ctas = self$getLinkedCtas(),
  ignore_missing = FALSE
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getMasterPersonIndex"></a>}}
\if{latex}{\out{\hypertarget{method-getMasterPersonIndex}{}}}
\subsection{Method \code{getMasterPersonIndex()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getMasterPersonIndex(
  ...,
  admissions = self$getAdmissionLineList(),
  cases = self$getLineList(),
  linked_ctas = self$getLinkedCtas(),
  linked_deaths = self$getLinkedDeaths(),
  linked_genomics = self$getLinkedGenomics(),
  sgene = self$getSGeneLineList(),
  linked_vaccinations = self$getLinkedVaccinations()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAdmissionEpisodes"></a>}}
\if{latex}{\out{\hypertarget{method-getAdmissionEpisodes}{}}}
\subsection{Method \code{getAdmissionEpisodes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getAdmissionEpisodes(
  ...,
  admissions = self$getAdmissionLineList()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAdmissionEpisodesLink"></a>}}
\if{latex}{\out{\hypertarget{method-getAdmissionEpisodesLink}{}}}
\subsection{Method \code{getAdmissionEpisodesLink()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getAdmissionEpisodesLink(
  ...,
  admissions = self$getAdmissionLineList()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getIncidenceFromLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getIncidenceFromLineList}{}}}
\subsection{Method \code{getIncidenceFromLineList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getIncidenceFromLineList(
  linelist,
  dateVar,
  codeExpr,
  codeType,
  statistic,
  ageBreaks = NULL,
  genderExpr = FALSE,
  excludeExpr = FALSE,
  subgroupExpr = NULL,
  noteExpr = NULL,
  unmatchedCode = NA_character_,
  unmatchedName = NA_character_,
  source = "phe linked data",
  validCodes = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDeathsLineListIncidence"></a>}}
\if{latex}{\out{\hypertarget{method-getDeathsLineListIncidence}{}}}
\subsection{Method \code{getDeathsLineListIncidence()}}{
Load deaths data from linelist - does not preserve ethnicity
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getDeathsLineListIncidence(
  dll = NULL,
  ageBreaks = NULL,
  deathOrReport = "death",
  cutoff = 28,
  subgroup = NULL,
  gender = FALSE,
  filterExpr = !(is.na(death_type28) & is.na(death_type60cod) & is.na(covidcod)),
  codeTypes = c("CTRY", "NHSER"),
  truncate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ageBreaks}}{- a list of ages which form the cut points for breaking continuous ages into ranges (or NULL for a single age category)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a covidTimeseriesFormat dataframe
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getLineListIncidence"></a>}}
\if{latex}{\out{\hypertarget{method-getLineListIncidence}{}}}
\subsection{Method \code{getLineListIncidence()}}{
Load incidence from line list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getLineListIncidence(
  ll = NULL,
  ageBreaks = NULL,
  gender = FALSE,
  specimenOrReport = "specimen",
  subgroup = "pillar",
  filterExpr = NULL,
  codeTypes = c("CTRY", "NHSER"),
  truncate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ageBreaks}}{- a list of ages which form the cut points for breaking continuous ages into ranges (or NULL for a single age category)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a covidTimeseriesFormat dataframe
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOutcomeEvents"></a>}}
\if{latex}{\out{\hypertarget{method-getOutcomeEvents}{}}}
\subsection{Method \code{getOutcomeEvents()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getOutcomeEvents(
  ...,
  admissions = self$getAdmissionLineList(),
  deaths = self$getDeathsLineList(),
  admit_episodes = self$getAdmissionEpisodes()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getDiagnosisEvents"></a>}}
\if{latex}{\out{\hypertarget{method-getDiagnosisEvents}{}}}
\subsection{Method \code{getDiagnosisEvents()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getDiagnosisEvents(
  ...,
  cases = self$getLineList(),
  sgene = self$getSGeneLineList(),
  genomics = self$getVAMLineList(),
  ctas = self$getLinkedCtas()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getVaccinationEvents"></a>}}
\if{latex}{\out{\hypertarget{method-getVaccinationEvents}{}}}
\subsection{Method \code{getVaccinationEvents()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getVaccinationEvents(
  ...,
  linked_vaccination = self$getLinkedVaccinations()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getEventTimeline"></a>}}
\if{latex}{\out{\hypertarget{method-getEventTimeline}{}}}
\subsection{Method \code{getEventTimeline()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getEventTimeline(
  ...,
  outcome_events = self$getOutcomeEvents(),
  diagnosis_events = self$getDiagnosisEvents(),
  vaccination_events = self$getVaccinationEvents()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getAugmentedEventTimeline"></a>}}
\if{latex}{\out{\hypertarget{method-getAugmentedEventTimeline}{}}}
\subsection{Method \code{getAugmentedEventTimeline()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getAugmentedEventTimeline(
  ...,
  event_timeline = self$getEventTimeline()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOneOneOne"></a>}}
\if{latex}{\out{\hypertarget{method-getOneOneOne}{}}}
\subsection{Method \code{getOneOneOne()}}{
Load 111 data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getOneOneOne(...)}\if{html}{\out{</div>}}
}

\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOneOneOneLineList"></a>}}
\if{latex}{\out{\hypertarget{method-getOneOneOneLineList}{}}}
\subsection{Method \code{getOneOneOneLineList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getOneOneOneLineList(dateFrom = Sys.Date() - 28, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getOneOneOneIncidence"></a>}}
\if{latex}{\out{\hypertarget{method-getOneOneOneIncidence}{}}}
\subsection{Method \code{getOneOneOneIncidence()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getOneOneOneIncidence(dateFrom = Sys.Date() - 28, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getVoc351LineList"></a>}}
\if{latex}{\out{\hypertarget{method-getVoc351LineList}{}}}
\subsection{Method \code{getVoc351LineList()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getVoc351LineList(...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getImmunizationLineListIncidence"></a>}}
\if{latex}{\out{\hypertarget{method-getImmunizationLineListIncidence}{}}}
\subsection{Method \code{getImmunizationLineListIncidence()}}{
Load incidence from line list
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getImmunizationLineListIncidence(
  ll = NULL,
  ageBreaks = NULL,
  filterExpr = NULL,
  subgroup = "string_dose_number",
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ageBreaks}}{- a list of ages which form the cut points for breaking continuous ages into ranges (or NULL for a single age category)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a covidTimeseriesFormat dataframe
Interpret S gene status according to various cut off values
function to help interpret S gene CT values in context of N gene and ORF gene to give S gene status. 
With the defaults this produces the same result as the sgtf_30 column in the source SGTF line list
Defaults are S:30,ORF:30,N:30,Control:Inf
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getImmunizationFraction"></a>}}
\if{latex}{\out{\hypertarget{method-getImmunizationFraction}{}}}
\subsection{Method \code{getImmunizationFraction()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getImmunizationFraction(ageBreaks = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-interpretSGene"></a>}}
\if{latex}{\out{\hypertarget{method-interpretSGene}{}}}
\subsection{Method \code{interpretSGene()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$interpretSGene(
  sGeneLineList,
  S_CT = 30,
  ORF1ab_CT = 30,
  N_CT = 30,
  Control_CT = Inf,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sGeneLineList}}{- a dataframe includeing}

\item{\code{S_CT}}{- S gene detected when P2CH3CQ <= this value}

\item{\code{ORF1ab_CT}}{- ORF1ab gene detected when P2CH1CQ <= this value}

\item{\code{N_CT}}{- N gene detected when P2CH2CQ <= this value}

\item{\code{Control_CT}}{- control sample is positive when P2CH4CQ <= this value}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
- the same dataframe with additional columns including "sGene" and "result"
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{coxData = coxData \%>\% interpretSGene()
#' @description Load incidence from line list
#' 
#' @param ageBreaks - a list of ages which form the cut points for breaking continuous ages into ranges (or NULL for a single age category)
#' @return a covidTimeseriesFormat dataframe
getLineListIncidence = function(ll=NULL, ageBreaks = NULL, gender=FALSE, specimenOrReport="specimen", subgroup="pillar", filterExpr=NULL, codeTypes = c("CTRY","NHSER"), truncate=NULL, ...) {
  filterExpr = enexpr(filterExpr)
  subgroup = tryCatch(ensym(subgroup), error = function(e) NULL)
  if(!identical(ll,NULL)) {
    tmp = ll  \%>\% collect()
  } else {
    tmp = self$getLineList(...) \%>\% collect()
  }
  path = attr(tmp,"paths")
  out2 = self$getSaved("LINE-LIST-INCIDENCE", params=list(tmp, ageBreaks, specimenOrReport,as_label(subgroup), as_label(filterExpr), codeTypes, gender), ..., orElse = function (...) covidTimeseriesFormat({
    if(!identical(filterExpr,NULL)) 
      tmp = tmp \%>\% filter(!!filterExpr)
    tmp = tmp \%>\% dplyr::mutate(ageCat = age \%>\% self$cutByAge(ageBreaks)) 
    if (gender) {
      tmp = tmp \%>\% dplyr::mutate(gender=self$normaliseGender(sex))
    } else {
      tmp = tmp \%>\% dplyr::mutate(gender=NA_character_)
    }
    if(!identical(subgroup,NULL)) {
      tmp = tmp \%>\% dplyr::mutate(subgroup=!!subgroup)
    } else {
      tmp = tmp \%>\% dplyr::mutate(subgroup=NA_character_)
    }
    if(specimenOrReport == "report")
      tmp = tmp \%>\% dplyr::mutate(date = as.Date(lab_report_date))
    else
      tmp = tmp \%>\% dplyr::mutate(date = as.Date(specimen_date))
    
    selectByRegion = function(df, code, codeType, name) {
      code = ensym(code)
      name = ensym(name)
      # check column exists
      if(!(as_label(code) \%in\% colnames(df))) return(tibble())
      df = df \%>\% dplyr::mutate(code = !!code, codeType=codeType, name=!!name) \%>\% 
        dplyr::mutate(
          code = ifelse(is.na(code),"E99999999",code),
          name = ifelse(is.na(code),"Unknown (England)",name)
        ) \%>\%
        dplyr::group_by( code,codeType,name,date, ageCat, gender,subgroup) \%>\% 
        dplyr::summarise(value = n()) 
      return(df)
    }
    
    out = NULL
    if ("CTRY" \%in\% codeTypes) {
      england = tmp \%>\% dplyr::mutate(code = "E92000001", codeType= "CTRY", name="England") \%>\% 
        dplyr::group_by(code,codeType,name,date, ageCat, gender,subgroup) \%>\% 
        dplyr::summarise(value = n())
      out = out \%>\% bind_rows(england)
    }
    
    if ("NHSER" \%in\% codeTypes) {
      nhser = tmp \%>\% selectByRegion(NHSER_code, "NHSER", NHSER_name)
      isNhser = nhser \%>\% self$codes$allPresentAndCorrect(codeTypes=c("NHSER","PSEUDO"))
      
      if(!isNhser) {
        nhser = tmp \%>\% selectByRegion(NHSER_code, "NHSER19CDH", NHSER_name) \%>\% 
          dplyr::inner_join(
            self$codes$getMappings() \%>\% dplyr::filter(fromCodeType=="NHSER19CDH" & toCodeType=="NHSER"), 
            by=c("code"="fromCode")
          ) \%>\%
          dplyr::ungroup() \%>\%
          dplyr::select(-code,-codeType, -fromCodeType,-rel,-weight) \%>\%
          dplyr::rename(code = toCode, codeType=toCodeType)
      }
      out = out \%>\% bind_rows(nhser)
    }
    
    if ("PHEC" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(PHEC_code, "PHEC", PHEC_name))}
    if ("UA" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(UTLA_code, "UA", UTLA_name))}
    if ("LAD" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(LTLA_code, "LAD", LTLA_name))}
    if ("LSOA" \%in\% codeTypes) {out = out \%>\% bind_rows(tmp \%>\% selectByRegion(LSOA_code, "LSOA", LSOA_name))}
    
    out = out \%>\% dplyr::mutate(source="line list",statistic = "case", type="incidence")
    out = out \%>\% self$fixDatesAndNames(truncate)
    out = out \%>\% self$fillAbsent(completeDates=TRUE)
    out = out \%>\% dplyr::ungroup()
    return(out)
  }))
  attr(out2,"paths") = path
  return(out2 \%>\% as_tibble())
},
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSGeneEras"></a>}}
\if{latex}{\out{\hypertarget{method-getSGeneEras}{}}}
\subsection{Method \code{getSGeneEras()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSGeneEras(
  cutoff = 28,
  S_CT = 30,
  ORF1ab_CT = 30,
  N_CT = 30,
  Control_CT = Inf,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSDropoutFreqency"></a>}}
\if{latex}{\out{\hypertarget{method-getSDropoutFreqency}{}}}
\subsection{Method \code{getSDropoutFreqency()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSDropoutFreqency(
  codeTypes = c("NHSER"),
  ageBreaks = NULL,
  S_CT = 30,
  ORF1ab_CT = 30,
  N_CT = 30,
  equivocal.rm = TRUE,
  window = 7,
  ll = NULL,
  sgll = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-augmentLineListWithLSOA"></a>}}
\if{latex}{\out{\hypertarget{method-augmentLineListWithLSOA}{}}}
\subsection{Method \code{augmentLineListWithLSOA()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$augmentLineListWithLSOA(
  ll,
  ltlaCodeCol = "LTLA_code",
  imdRankCol = "imd_rank"
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getInfectionEpisodes"></a>}}
\if{latex}{\out{\hypertarget{method-getInfectionEpisodes}{}}}
\subsection{Method \code{getInfectionEpisodes()}}{
Combine line list and S-gene line list to get a list of infection episodes

this defines how long between tests before two tests are regarded as a new episode.
if the tests are sgtf equivocal double this is allowed.
calculate the individual episodes of covid resulting from runs of sequential positive tests <28 days apart.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getInfectionEpisodes(
  cutoff = 28,
  S_CT = 30,
  ORF1ab_CT = 30,
  N_CT = 30,
  Control_CT = Inf,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cutoff}}{- the time gap between sequential tests after which two tests are said to be from a new episode}

\item{\code{S_CT}}{- S gene detected when P2CH3CQ <= this value}

\item{\code{ORF1ab_CT}}{- ORF1ab gene detected when P2CH1CQ <= this value}

\item{\code{N_CT}}{- N gene detected when P2CH2CQ <= this value}

\item{\code{Control_CT}}{- control sample is positive when P2CH4CQ <= this value}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a covidTimeseriesFormat dataframe
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getNegatives"></a>}}
\if{latex}{\out{\hypertarget{method-getNegatives}{}}}
\subsection{Method \code{getNegatives()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getNegatives(
  codeTypes = c("CTRY", "NHSER"),
  truncate = NULL,
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSeroprevalence"></a>}}
\if{latex}{\out{\hypertarget{method-getSeroprevalence}{}}}
\subsection{Method \code{getSeroprevalence()}}{
Load the seroprevalance file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSeroprevalence(...)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw FF100 data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSeroprevalenceTestIncidence"></a>}}
\if{latex}{\out{\hypertarget{method-getSeroprevalenceTestIncidence}{}}}
\subsection{Method \code{getSeroprevalenceTestIncidence()}}{
Load seroprevalence data from linelist
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSeroprevalenceTestIncidence(ageBreaks = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{ageBreaks}}{- a list of ages which form the cut points for breaking continuous ages into ranges (or NULL for a single age category)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
a covidTimeseriesFormat dataframe
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFF100"></a>}}
\if{latex}{\out{\hypertarget{method-getFF100}{}}}
\subsection{Method \code{getFF100()}}{
Load ff100 file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getFF100()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raw FF100 data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getCHESS"></a>}}
\if{latex}{\out{\hypertarget{method-getCHESS}{}}}
\subsection{Method \code{getCHESS()}}{
Load the CHESS dataset from a path
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getCHESS()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{- a path to the chess csv file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
raw CHESS data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSARI"></a>}}
\if{latex}{\out{\hypertarget{method-getSARI}{}}}
\subsection{Method \code{getSARI()}}{
Load the CHESS dataset from a path
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSARI()}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{- a path to the chess csv file}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
raw CHESS data set
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getCHESSSummary"></a>}}
\if{latex}{\out{\hypertarget{method-getCHESSSummary}{}}}
\subsection{Method \code{getCHESSSummary()}}{
Load Chess summary file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getCHESSSummary()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSARISummary"></a>}}
\if{latex}{\out{\hypertarget{method-getSARISummary}{}}}
\subsection{Method \code{getSARISummary()}}{
Load Sari summary file
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSARISummary(truncate = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getFourNationsCases"></a>}}
\if{latex}{\out{\hypertarget{method-getFourNationsCases}{}}}
\subsection{Method \code{getFourNationsCases()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getFourNationsCases(truncate = NULL, ...)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getSPIMextract"></a>}}
\if{latex}{\out{\hypertarget{method-getSPIMextract}{}}}
\subsection{Method \code{getSPIMextract()}}{
Load the SPI-M aggregated data spreadsheet
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getSPIMextract(truncate = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a covidTimeseriesFormat dataframe
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-getTheSPIMFireHose"></a>}}
\if{latex}{\out{\hypertarget{method-getTheSPIMFireHose}{}}}
\subsection{Method \code{getTheSPIMFireHose()}}{
Load the SPI-M and public data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$getTheSPIMFireHose(...)}\if{html}{\out{</div>}}
}

\subsection{Returns}{
a covidTimeseriesFormat dataframe
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SPIMDatasetProvider$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
